// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef PROTOBUF_model_2eproto__INCLUDED
#define PROTOBUF_model_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_model_2eproto();
void protobuf_AssignDesc_model_2eproto();
void protobuf_ShutdownFile_model_2eproto();

class model;

enum model_Color {
  model_Color_GREEN = 1,
  model_Color_BLUE = 2,
  model_Color_RED = 3,
  model_Color_PURPLE = 4,
  model_Color_YELLOW = 5
};
bool model_Color_IsValid(int value);
const model_Color model_Color_Color_MIN = model_Color_GREEN;
const model_Color model_Color_Color_MAX = model_Color_YELLOW;
const int model_Color_Color_ARRAYSIZE = model_Color_Color_MAX + 1;

const ::google::protobuf::EnumDescriptor* model_Color_descriptor();
inline const ::std::string& model_Color_Name(model_Color value) {
  return ::google::protobuf::internal::NameOfEnum(
    model_Color_descriptor(), value);
}
inline bool model_Color_Parse(
    const ::std::string& name, model_Color* value) {
  return ::google::protobuf::internal::ParseNamedEnum<model_Color>(
    model_Color_descriptor(), name, value);
}
// ===================================================================

class model : public ::google::protobuf::Message {
 public:
  model();
  virtual ~model();

  model(const model& from);

  inline model& operator=(const model& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const model& default_instance();

  void Swap(model* other);

  // implements Message ----------------------------------------------

  model* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const model& from);
  void MergeFrom(const model& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef model_Color Color;
  static const Color GREEN = model_Color_GREEN;
  static const Color BLUE = model_Color_BLUE;
  static const Color RED = model_Color_RED;
  static const Color PURPLE = model_Color_PURPLE;
  static const Color YELLOW = model_Color_YELLOW;
  static inline bool Color_IsValid(int value) {
    return model_Color_IsValid(value);
  }
  static const Color Color_MIN =
    model_Color_Color_MIN;
  static const Color Color_MAX =
    model_Color_Color_MAX;
  static const int Color_ARRAYSIZE =
    model_Color_Color_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Color_descriptor() {
    return model_Color_descriptor();
  }
  static inline const ::std::string& Color_Name(Color value) {
    return model_Color_Name(value);
  }
  static inline bool Color_Parse(const ::std::string& name,
      Color* value) {
    return model_Color_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required .model.Color color = 3;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 3;
  inline ::model_Color color() const;
  inline void set_color(::model_Color value);

  // @@protoc_insertion_point(class_scope:model)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  int color_;
  friend void  protobuf_AddDesc_model_2eproto();
  friend void protobuf_AssignDesc_model_2eproto();
  friend void protobuf_ShutdownFile_model_2eproto();

  void InitAsDefaultInstance();
  static model* default_instance_;
};
// ===================================================================


// ===================================================================

// model

// required int32 X = 1;
inline bool model::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void model::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void model::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void model::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 model::x() const {
  // @@protoc_insertion_point(field_get:model.X)
  return x_;
}
inline void model::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:model.X)
}

// required int32 Y = 2;
inline bool model::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void model::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void model::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void model::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 model::y() const {
  // @@protoc_insertion_point(field_get:model.Y)
  return y_;
}
inline void model::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:model.Y)
}

// required .model.Color color = 3;
inline bool model::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void model::set_has_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void model::clear_has_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void model::clear_color() {
  color_ = 1;
  clear_has_color();
}
inline ::model_Color model::color() const {
  // @@protoc_insertion_point(field_get:model.color)
  return static_cast< ::model_Color >(color_);
}
inline void model::set_color(::model_Color value) {
  assert(::model_Color_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:model.color)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::model_Color> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::model_Color>() {
  return ::model_Color_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_model_2eproto__INCLUDED
